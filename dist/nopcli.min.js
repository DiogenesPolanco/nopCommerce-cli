#! /usr/bin/env node
import e from"yargs";import{getInstalledPath as t}from"get-installed-path";import a from"shelljs";import n from"fs";import i from"cli-progress";class s{static getPath(){return new Promise((e=>{t("nopcli").then((t=>{e(void 0!==t?t:"./")})).catch((t=>{e("./")}))}))}static getGroupAlias(){return{alias:"group",type:"string",default:"Widgets",describe:"support Widgets, Payments, DiscountRules, Shipping and Misc"}}static getVersionAlias(){return{alias:"version",type:"number",default:430,describe:'Only support ["4.20", "4.30", "4.40", "4.50"]'}}static getPluginAlias(){return{alias:"plugin",type:"string"}}static getClearAlias(){return{alias:"clear",type:"boolean",default:!1}}static getBuildAlias(){return{alias:"build",type:"boolean",default:!1}}static getInitAlias(){return{alias:"init",type:"boolean",default:!1}}static getDescriptionNewCommand(){return"create plugin -[g] -[p] -[v] -[c] -[b] -[i]"}static getDescriptionBuildCommand(){return"build plugin -[g] -[p]"}static getDescriptionInitCommand(){return"init plugin -[g] -[p] -[v] -[b]"}static getDescriptionDemand(){return"please choose a valid command"}}class r{static printHandler(e,t){let n=e,i=t;n?void 0===n.code?a.echo(`${n}\n`):a.echo(`${n.code}: ${n.message}\n`):void 0===i.message?a.echo(`${i}\n`):a.echo(`${i.message}\n`)}}let l;l={"001":{message:'The plugin: "{{nopCli}}" already exists!',code:"001"},"002":{message:'The plugin: "{{nopCli}}" was created successfully!',code:"002"},"003":{message:"There was an error while building the plugin, please check and try again!",code:"003"},"004":{message:"Plugin build was successful!",code:"004"},"005":{message:"There was an error while getting the path value, please check and try again!",code:"005"},"006":{message:'Creating the plugin: "{{nopCli}}", Please Wait...',code:"006"}};class c{static waitProgress(e=i.Presets.shades_classic,t=0,n=100,s=10){let r=this,l=new i.Bar({format:"progress [{bar}] {percentage}% | {value}/{total}"},e);return l.start(n,0),new Promise((e=>{const n=setInterval((()=>{t++,l.update(t),t>=l.getTotal()&&(clearInterval(n),l.stop(),a.echo(""),e(r))}),s)}))}static waitProgressTwo(e,t=0,n=i.Presets.shades_classic,s=100){return(e=e??new i.Bar({format:"progress [{bar}] {percentage}% | {value}/{total}"},n)).start(s,0),t++,e.update(t),t>=e.getTotal()&&(e.stop(),a.echo("")),e}}class o{getSrcPluginName(e){return`Nop.Plugin.${e.g}.NopCliGeneric`}getOutPluginName(e){return`Nop.Plugin.${e.g}.${e.p}`}getFullSrcPlugin(e){return`${this.getSrcSolutionPath()}/Plugins/${this.getOutPluginName(e)}`}getSrcSolutionPath(){return n.existsSync("Plugins")?".":"src"}async validateVersion(e){let t=this.getSrcSolutionPath();return await n.existsSync(`${t}/Libraries/Nop.Services/Plugins/Samples/uploadedItems.json`)&&n.readFile(`${t}/Libraries/Nop.Services/Plugins/Samples/uploadedItems.json`,"utf8",((t,a)=>{if(t)throw t;let n=JSON.parse(a.replace(new RegExp("//(.*)","g"),""));e=n[3].SupportedVersion})),e}async getSrcVersion(e){let t=void 0!==e.v&&420!==e.v?450===e.v?440:e.v:430;return await this.validateVersion(t)}getOutProjectPathPluginName(e){return`${this.getFullSrcPlugin(e)}/${this.getOutPluginName(e)}.csproj`}async existOutProjectAsync(e){let t=this;return new Promise((async(a,i)=>{let s=t.getOutProjectPathPluginName(e);void 0===s?i(l["005"]):a(await n.existsSync(s))}))}async copyFiles(e,t){let i=this;return new Promise((async s=>{let r=i.getFullSrcPlugin(t),l=i.getSrcPluginName(t),c=i.getOutPluginName(t);a.mkdir("-p",`${r}`),a.cp("-R",`${e}/src/nopCommerce-${await i.getSrcVersion(t)}/${l}/`,r),a.mv(`${r}/${l}.csproj`,`${r}/${c}.csproj`),await n.readFileSync(`${e}/src/assets/images/logos/logo.png`,(function(e,t){e?s(!1):n.writeFile(`${r}/logos.png`,t,"base64",(function(e){e&&s(!1)}))})),s(!0)}))}async replaceContentFiles(e){let t=this;return new Promise((async i=>{let s=t.getFullSrcPlugin(e),r=a.find(`${s}`);if(r.length>0){for(const t of r)n.lstat(t,((n,i)=>{if(i.isFile()){let n=t.replace("NopCliGeneric",e.p);a.sed("-i",/NopCliGeneric/g,e.p,t),n!==t&&a.mv(`${t}`,`${n}`)}}));i(!0)}else i(!1)}))}async addSolution(e){let t=this;return new Promise((async(i,s)=>{await n.existsSync(`${t.getSrcSolutionPath()}/NopCommerce.sln`)?(r.printHandler(null,l["006"].message.replace("{{nopCli}}",t.getOutPluginName(e))),a.config.silent=!0,c.waitProgress().then((()=>{a.cd(t.getSrcSolutionPath()),a.exec(`dotnet sln add ./Plugins/${t.getOutPluginName(e)}`),i(l["002"].message.replace("{{nopCli}}",t.getOutPluginName(e)))}))):s(l["001"].message.replace("{{nopCli}}",t.getOutPluginName(e)))}))}async clearPlugin(e){let t=this;return new Promise((async(n,i)=>{t.existOutProjectAsync(e).then((i=>{i&&a.rm("-r",t.getFullSrcPlugin(e)),n(i)})).catch((e=>{i(e)}))}))}async createProjectAsync(e,t){let a=this;return new Promise((async(n,i)=>{await a.copyFiles(t,e).then((async t=>{t?await a.replaceContentFiles(e).then((async t=>{t?a.addSolution(e).then((async e=>{n(e)})).catch((e=>{i(e)})):i(l["001"].message.replace("{{nopCli}}",a.getOutPluginName(e)))})).catch((e=>{i(e)})):i(l["001"].message.replace("{{nopCli}}",a.getOutPluginName(e)))})).catch((e=>{i(e)}))}))}async TryToCreate(e,t){let a=this;return new Promise((async(n,i)=>{a.createProjectAsync(e,t).then((e=>{n(e)})).catch((()=>{a.clearPlugin(e).then((t=>{n(l[t?"002":"001"].message.replace("{{nopCli}}",a.getOutPluginName(e)))})).catch((e=>{i(e)}))}))}))}async CreateAsync(e,t){let a=this;return new Promise((async(n,i)=>{a.existOutProjectAsync(e.argv).then((async s=>{!1===s?a.TryToCreate(e.argv,t).then((e=>{n(e)})).catch((e=>{i(e)})):e.argv.c?a.clearPlugin(e.argv).then((s=>{a.TryToCreate(e.argv,t,s).then((e=>{n(e)})).catch((e=>{i(e)}))})):i(l["001"].message.replace("{{nopCli}}",a.getOutPluginName(e.argv)))})).catch((e=>{i(e)}))}))}async cloneAsync(e){return new Promise((async(e,t)=>{a.which("git")?c.waitProgressTwo():(e("Sorry, this script requires git"),a.exit(1))}))}async Build(e){let t=this;return new Promise((async(n,i)=>{await t.existOutProjectAsync(e.argv)?(a.cd(t.getSrcPluginName(e.argv)),a.exec(`dotnet build ${t.getOutPluginName(e.argv)}.csproj`),n(l["003"])):i(l["004"])}))}async Init(e,t){let a=this;return new Promise((async(n,i)=>{await a.cloneAsync(e.argv).then((i=>{e.argv.p?a.createProjectAsync(e.argv,t).then((t=>{e.argv.b?a.Build(e).then((e=>{n(e)})):n(t)})):n(i)})).catch((e=>{i(e)}))}))}}const g=new class{async create(e){return s.getPath().then((async t=>{await(new o).CreateAsync(e,t).then((e=>{r.printHandler(null,e)})).catch((e=>{r.printHandler(e,null)}))}))}async build(e){return s.getPath().then((async t=>{await(new o).Build(e,t).then((e=>{r.printHandler(null,e)})).catch((e=>{r.printHandler(e,null)}))}))}async init(e){return s.getPath().then((async t=>{await(new o).Init(e,t).then((e=>{r.printHandler(null,e)})).catch((e=>{r.printHandler(e,null)}))}))}};e.usage("$0 command").option("g",s.getGroupAlias()).option("p",s.getPluginAlias()).option("v",s.getVersionAlias()).option("c",s.getClearAlias()).option("b",s.getBuildAlias()).option("i",s.getInitAlias()).command("new",s.getDescriptionNewCommand(),(e=>g.create(e))).command("build",s.getDescriptionBuildCommand(),(e=>g.build(e))).command("init",s.getDescriptionInitCommand(),(e=>g.init(e))).demand(1,s.getDescriptionDemand()).showHelpOnFail(!0).help("h").alias("h","help").argv;
